// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	ratelimiter "github.com/guachikuo/dcard-demo/services/ratelimiter"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Validate provides a mock function with given fields: ctx, name, refArg
func (_m *Service) Validate(ctx context.Context, name ratelimiter.ValidatorName, refArg string) (bool, int32, int32, error) {
	ret := _m.Called(ctx, name, refArg)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, ratelimiter.ValidatorName, string) bool); ok {
		r0 = rf(ctx, name, refArg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, ratelimiter.ValidatorName, string) int32); ok {
		r1 = rf(ctx, name, refArg)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 int32
	if rf, ok := ret.Get(2).(func(context.Context, ratelimiter.ValidatorName, string) int32); ok {
		r2 = rf(ctx, name, refArg)
	} else {
		r2 = ret.Get(2).(int32)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, ratelimiter.ValidatorName, string) error); ok {
		r3 = rf(ctx, name, refArg)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
